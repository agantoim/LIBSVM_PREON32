import com.virtenio.driver.device.ADT7410;
import com.virtenio.driver.device.MPL115A2;
import com.virtenio.driver.device.SHT21;
import com.virtenio.driver.gpio.GPIO;
import com.virtenio.driver.gpio.NativeGPIO;
import com.virtenio.driver.i2c.I2C;
import com.virtenio.driver.i2c.NativeI2C;
import com.virtenio.misc.StringUtils;
import com.virtenio.vm.Time;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

class model_data {

	// header model
	static final String[] header = { 	"svm_type c_svc",
										"kernel_type rbf",
										"gamma 0.3333333333333333",
										"nr_class 2",
										"total_sv 327",
										"rho 0.9040740059743656",
										"label 0 1",
										"nr_sv 8 319"
										
									};
	// koefisien atau label dari SV
	static final double[][] sv_coef = { { 	
										0.9943774024668492,
										0.8932901718614477,
										1.0,
										0.35207855068851196,
										0.6462330919044155,
										0.050061596525892926,
										1.0,
										0.35915547122049907,
										-0.07481644259531432,
										-0.05251411137969236,
										-0.02085732015571796,
										-0.0280293144748336,
										-0.01761437458777982,
										-0.059109457699232974,
										-0.05745968714583735,
										-0.005616485946091154,
										-0.05514306223476533,
										-0.0102595456822666,
										-0.0292898644403818,
										-0.05422433286633685,
										-0.04484829210884463,
										-0.0307100371402914,
										-0.01977640587256065,
										-0.048304579732510115,
										-0.04269964100227698,
										-0.0786195721795307,
										-0.04009169159306354,
										-0.029678146174026775,
										-0.051231494934662544,
										-0.05478891396421045,
										-0.042376808440579915,
										-0.03740073370292937,
										-0.040668041428742197,
										-0.07321849395358578,
										-0.003522176047442072,
										-0.012681042774950703,
										-0.0016079401552902362,
										-0.004202756117349731,
										-0.0028689621566077017,
										-0.010728684503469168,
										-0.00557881422715277,
										-0.01038849507375011,
										-0.002240503534927692,
										-0.016085016096425653,
										-0.011447156945933625,
										-0.051757709384602495,
										-0.010340082262396567,
										-0.057697037594355335,
										-0.005324880269772506,
										-0.023970732249828906,
										-0.01999724905583796,
										-0.005358335218492348,
										-0.006438997063967103,
										-0.0663644332723941,
										-0.013532472522692733,
										-7.649170875497846E-4,
										-0.01910198820061763,
										-0.003351086856462279,
										-0.01406858775605634,
										-0.01736646692527911,
										-0.060461436564353384,
										-0.03297027465869177,
										-0.024378822039830064,
										-0.010486960130217169,
										-0.015574408717458818,
										-0.0017631462622750835,
										-0.0033430575741762013,
										-0.04619237794659892,
										-0.07047627978877098,
										-0.01671955276861648,
										-0.0026411029945079822,
										-0.001670118748646324,
										-0.0057127493527855955,
										-0.0021105823806763092,
										-0.0031767332985992614,
										-0.006348648470357611,
										-0.06893067949990923,
										-0.01583294175722118,
										-0.029421406776519922,
										-0.024988595841402124,
										-0.02533322385268727,
										-9.012990385444675E-4,
										-0.012438075628100464,
										-0.010816625553642274,
										-0.00523222975557924,
										-0.008772016495518967,
										-0.0019902782936323114,
										-0.0011032805989260942,
										-0.0034296701337504683,
										-0.011752099718000564,
										-0.004444484056189524,
										-0.01738462580746804,
										-0.0011993940818596398,
										-0.010723123935054311,
										-9.955564378367984E-4,
										-0.0070603989140648245,
										-0.02068147084528934,
										-6.625840720578622E-4,
										-0.03231385225341725,
										-0.0034267773344904026,
										-0.02804296886830439,
										-0.004610239613358137,
										-0.010848714397798115,
										-0.018478747329190918,
										-0.015792084012745858,
										-0.049488485045260946,
										-0.019364050139615355,
										-0.0014645479525557021,
										-0.013556798670670106,
										-4.250951850196124E-4,
										-0.010861362937915977,
										-7.108191766758694E-4,
										-0.003951255755257484,
										-0.00750724781557776,
										-0.03965778500839589,
										-0.0025962574214334045,
										-0.0040353988780682075,
										-0.0023035480853536325,
										-9.572471841285402E-4,
										-0.0010614911252173644,
										-0.016635026253278114,
										-0.04565838932240756,
										-0.0017245382272470186,
										-0.01910941085843497,
										-0.013430209525943083,
										-0.06589434104518815,
										-0.002752797480579494,
										-0.007025187699551634,
										-0.0028750146053185786,
										-0.03357740743374347,
										-0.0301401517117885,
										-0.012042583460770147,
										-0.013572578364336929,
										-0.012626427255179106,
										-0.01781465199511123,
										-0.004594807706759681,
										-0.001086200871697646,
										-0.004736101420930489,
										-0.0015873114882036644,
										-0.007733011754121256,
										-0.0018715036428941663,
										-0.007979977774546789,
										-0.02439087703702369,
										-0.0034650755591100015,
										-0.001174105136695316,
										-0.03278993890697547,
										-0.008711465248882172,
										-0.0018546128449753734,
										-0.02250203277769597,
										-0.0024894219509934423,
										-0.002445961326743113,
										-0.004436061881261701,
										-0.02256176535392469,
										-0.04784078576369128,
										-0.020276419359844866,
										-0.011296427088280743,
										-0.003743712555566411,
										-0.0012978477635225876,
										-0.00813334419930297,
										-0.008701288805463458,
										-0.0025148210916826255,
										-0.0021231608470830953,
										-0.07636483590010533,
										-0.0013161075649205584,
										-0.002539278377831685,
										-0.0012186097410575084,
										-0.0038787372806833942,
										-0.0010998182136269213,
										-0.024965002854995092,
										-0.0162204045584057,
										-0.027939512299771915,
										-0.03361201633819843,
										-0.02893730394314402,
										-0.03511650880529638,
										-0.02567808594201685,
										-0.002455064427319026,
										-0.018324904334857048,
										-0.030754903356458512,
										-0.044784741692935254,
										-0.01826532833716181,
										-0.011213067403784851,
										-0.005693448814755713,
										-0.00912398043174105,
										-0.010124095052410666,
										-7.437234985863144E-4,
										-0.001036698897824595,
										-0.0037510306103801664,
										-0.0018108332186194682,
										-0.0014613133263677652,
										-0.0012998718232284344,
										-0.005607987973824673,
										-0.035662443359249535,
										-0.008379022719029036,
										-0.06147303230331476,
										-0.003179763959806625,
										-0.001382102194053849,
										-0.050004166490724526,
										-0.004023599835068108,
										-0.011267245349085003,
										-0.004427977052805132,
										-0.0032802686744833973,
										-0.0036423071683489064,
										-0.0054911365601282925,
										-0.0014693467141444682,
										-0.006190874959484668,
										-0.007777321884076555,
										-0.004264353872230161,
										-0.012487276385373189,
										-0.0038576958479799193,
										-0.02547901011145815,
										-7.56304982939271E-4,
										-0.004084676275341694,
										-0.011184447004191621,
										-0.004994716551676719,
										-0.012924144076852434,
										-0.020874722406420066,
										-0.018585996059639547,
										-0.0198311335451891,
										-0.0029960086488326453,
										-0.021996211657351664,
										-0.015210180401160024,
										-0.0028317035080920915,
										-0.005205175366821291,
										-0.004372014149245619,
										-0.001088445699579515,
										-0.002510493856360546,
										-0.002056464163795558,
										-0.010732918402106432,
										-6.403552219986786E-4,
										-0.008037257653576012,
										-0.005207683183281665,
										-0.020661810344704677,
										-0.004622475090470428,
										-0.05532891796056604,
										-0.07622893749833798,
										-0.011801255775740666,
										-0.0014764731635672523,
										-0.01665351519109643,
										-0.009057187666671915,
										-0.026255518141148012,
										-0.006854302516605439,
										-0.00605799460433023,
										-8.400730991925376E-4,
										-0.005427552938028948,
										-0.003921940501690042,
										-0.029043671240685437,
										-0.006053394726297909,
										-0.009233872420716072,
										-0.03539033081042425,
										-0.008946095125365337,
										-6.557021248198569E-4,
										-0.0010881571985593135,
										-0.01544012574921997,
										-0.023084390292612778,
										-0.0036159623586026223,
										-0.0034890475898139138,
										-0.00582936009733143,
										-0.0014810105080400179,
										-0.0022361243210284884,
										-0.008830847300232486,
										-0.018721061396198793,
										-0.0035544810484206962,
										-0.07278953525590146,
										-5.961054661054908E-4,
										-0.040885910155373996,
										-0.0017510902151037138,
										-0.004208064832807264,
										-0.002044551926897708,
										-0.00836784820716865,
										-0.0011785198136114222,
										-0.01890300185211058,
										-0.010083742420367022,
										-0.010356033598300715,
										-0.04277027801096833,
										-0.008184302511882723,
										-0.03846251921832117,
										-0.016614923234246907,
										-0.012400225283995158,
										-0.05845546769972104,
										-0.024849368381720426,
										-0.0332787505409296,
										-0.029800511276188654,
										-0.028630001192836547,
										-0.020205010495669716,
										-0.04357699056007497,
										-0.005302315224798133,
										-0.04380495080748233,
										-0.008183489060023556,
										-0.01148743610180768,
										-0.0020404674003520725,
										-0.0021916572699266636,
										-0.0065140012318093245,
										-0.013496861712429569,
										-0.06421958202288519,
										-0.04180552320921316,
										-0.0040296738520712375,
										-0.0022238377338556665,
										-0.005894539009615843,
										-0.00488946728872686,
										-0.0014487537491824692,
										-0.009747400704126247,
										-0.013335457314193845,
										-0.01925411164813867,
										-0.006420509559073751,
										-0.01917780530332291,
										-0.004173030504749757,
										-0.0020490882911486596,
										-0.023085988487891007,
										-0.003379083006944398,
										-0.002980800964996533,
										-0.00420162858129503,
										-0.0037223409981349052,
										-0.0014058187317931372,
										-0.002873267639621411,
										-0.01815349337187759,
										-0.03394647362827111,
										-0.008213622992230956,
										-0.014785826828711653,
										-0.006745094249172414,
										-0.0010616946554977136,
										-7.08750633264452E-4,
										-0.03235843665465176,
										-0.0024802064374045926,
										-0.015130464570862366,
										-0.003393792026767699,
										-0.06607855954589299,
										-0.020404210270283815
										} };

	// index dan value dari SV
	public static final String[] sv_string = { 	
										"1:27.08160018920898 2:-17.41446685791015 3:82.02032470703125",
										"1:26.83199882507324 2:-16.20722961425781 3:81.31842041015625",
										"1:26.27039909362792 2:-13.53861236572265 3:83.4775390625",
										"1:26.33279991149902 2:-13.85630416870117 3:83.7216796875",
										"1:26.51999855041503 2:-14.74584197998046 3:82.20343017578125",
										"1:26.70719909667968 2:-15.63538360595703 3:83.83612060546875",
										"1:26.70719909667968 2:-15.63538360595703 3:83.83612060546875",
										"1:27.0191993713379 2:-17.09677124023437 3:82.82904052734375",
										"1:28.2047996520996 2:-22.68817138671875 3:76.977294921875",
										"1:28.57919883728027 2:-24.53079223632812 3:76.86285400390625",
										"1:28.57919883728027 2:-24.46725463867187 3:78.72442626953125",
										"1:28.64159965515136 2:-24.78494262695312 3:78.89227294921875",
										"1:28.70399856567382 2:-25.1026382446289 3:78.9609375",
										"1:29.07839965820312 2:-26.88172149658203 3:78.77783203125",
										"1:29.39039993286132 2:-28.27957153320312 3:77.62579345703125",
										"1:29.32799911499023 2:-28.0254135131836 3:76.4432373046875",
										"1:29.39039993286132 2:-28.27957153320312 3:75.5887451171875",
										"1:29.51519966125488 2:-28.8514175415039 3:74.07049560546875",
										"1:29.45279884338378 2:-28.53372192382812 3:72.6590576171875",
										"1:29.51519966125488 2:-28.8514175415039 3:71.6519775390625",
										"1:29.7023983001709 2:-29.74095916748046 3:74.46722412109375",
										"1:29.82719993591308 2:-30.31280517578125 3:72.02581787109375",
										"1:29.95199966430664 2:-30.94818878173828 3:72.48358154296875",
										"1:30.20159912109375 2:-32.09188842773437 3:74.13916015625",
										"1:30.26399993896484 2:-32.34603881835937 3:73.32281494140625",
										"1:31.88639831542968 2:-39.90713500976562 3:69.40130615234375",
										"1:32.1983985900879 2:-41.36852264404296 3:68.36370849609375",
										"1:32.3855972290039 2:-42.25806427001953 3:68.77569580078125",
										"1:32.6975975036621 2:-43.71945190429687 3:68.52392578125",
										"1:32.8223991394043 2:-44.2277603149414 3:66.6776123046875",
										"1:33.1968002319336 2:-46.00684356689453 3:64.64056396484375",
										"1:33.0719985961914 2:-45.30791473388671 3:65.03729248046875",
										"1:33.1968002319336 2:-46.00684356689453 3:67.95172119140625",
										"1:33.32159805297851 2:-46.51515197753906 3:70.171875",
										"1:33.32159805297851 2:-46.45161437988281 3:67.1353759765625",
										"1:33.63359832763671 2:-47.91300201416015 3:69.98876953125",
										"1:33.63359832763671 2:-48.04007720947265 3:68.07379150390625",
										"1:33.69599914550781 2:-48.2306900024414 3:68.22637939453125",
										"1:33.69599914550781 2:-48.2306900024414 3:68.45526123046875",
										"1:33.69599914550781 2:-48.2306900024414 3:68.59259033203125",
										"1:33.7583999633789 2:-48.61192321777343 3:68.5086669921875",
										"1:33.7583999633789 2:-48.67546081542968 3:68.1729736328125",
										"1:34.0704002380371 2:-50.00977325439453 3:68.2950439453125",
										"1:34.13279724121093 2:-50.20038604736328 3:68.50103759765625",
										"1:34.31999969482421 2:-51.08992767333984 3:70.446533203125",
										"1:34.44479751586914 2:-51.66177368164062 3:70.16424560546875",
										"1:34.50719833374023 2:-51.9794692993164 3:69.68359375",
										"1:34.69440078735351 2:-52.86901092529296 3:68.1119384765625",
										"1:34.69440078735351 2:-52.86901092529296 3:66.53265380859375",
										"1:34.69440078735351 2:-52.86901092529296 3:63.122314453125",
										"1:34.75679779052734 2:-53.1231689453125 3:61.5506591796875",
										"1:34.88159942626953 2:-53.63147735595703 3:63.000244140625",
										"1:35.00639724731445 2:-54.33039855957031 3:65.08306884765625",
										"1:35.19359970092773 2:-55.15640258789062 3:67.44818115234375",
										"1:35.25600051879882 2:-55.41055297851562 3:65.1822509765625",
										"1:35.38079833984375 2:-55.98240661621093 3:63.580078125",
										"1:35.75519943237304 2:-57.76148223876953 3:64.037841796875",
										"1:36.37919998168945 2:-60.62071990966796 3:63.1070556640625",
										"1:36.56639862060546 2:-61.31964874267578 3:62.47381591796875",
										"1:36.81599807739257 2:-62.46334075927734 3:65.533203125",
										"1:36.94079971313476 2:-63.16226959228515 3:64.99151611328125",
										"1:36.94079971313476 2:-63.03518676757812 3:63.1986083984375",
										"1:37.00320053100585 2:-63.3528823852539 3:62.07708740234375",
										"1:37.06559753417968 2:-63.67057800292968 3:59.58990478515625",
										"1:37.06559753417968 2:-63.67057800292968 3:59.92559814453125",
										"1:37.56480026245117 2:-65.89442443847656 3:59.643310546875",
										"1:37.627197265625 2:-66.1485824584961 3:59.643310546875",
										"1:37.75199890136718 2:-66.65689086914062 3:61.13104248046875",
										"1:38.0639991760254 2:-68.11827850341795 3:63.23675537109375",
										"1:38.12639999389648 2:-68.37242889404295 3:61.07763671875",
										"1:38.12639999389648 2:-68.49951171875 3:60.46728515625",
										"1:38.12639999389648 2:-68.37242889404295 3:60.46728515625",
										"1:38.18880081176757 2:-68.56304931640625 3:60.22314453125",
										"1:38.18880081176757 2:-68.69012451171875 3:59.7958984375",
										"1:38.3135986328125 2:-69.19843292236328 3:59.24658203125",
										"1:38.6879997253418 2:-70.91397857666016 3:61.19970703125",
										"1:38.81279754638671 2:-71.48582458496092 3:63.183349609375",
										"1:38.81279754638671 2:-71.48582458496092 3:59.91796875",
										"1:38.9375991821289 2:-72.0576705932617 3:61.138671875",
										"1:38.87519836425781 2:-71.8035202026367 3:56.82806396484375",
										"1:39.0 2:-72.3753662109375 3:58.29290771484375",
										"1:39.0624008178711 2:-72.69305419921875 3:58.56756591796875",
										"1:39.0624008178711 2:-72.69305419921875 3:58.96429443359375",
										"1:39.12479782104492 2:-72.82013702392578 3:60.83349609375",
										"1:39.12479782104492 2:-72.82013702392578 3:59.66619873046875",
										"1:39.18719863891601 2:-73.13782501220703 3:59.45257568359375",
										"1:39.0 2:-72.3753662109375 3:54.81390380859375",
										"1:38.81279754638671 2:-71.42228698730467 3:56.43133544921875",
										"1:38.81279754638671 2:-71.42228698730467 3:56.55340576171875",
										"1:38.6255989074707 2:-70.65982055664062 3:58.208984375",
										"1:38.6255989074707 2:-70.65982055664062 3:58.605712890625",
										"1:38.5631980895996 2:-70.34213256835938 3:58.788818359375",
										"1:38.5631980895996 2:-70.53274536132812 3:58.88037109375",
										"1:38.5631980895996 2:-70.46920776367188 3:60.46728515625",
										"1:38.3759994506836 2:-69.45259094238281 3:58.88037109375",
										"1:38.3759994506836 2:-69.57966613769531 3:59.97900390625",
										"1:38.3759994506836 2:-69.57966613769531 3:61.138671875",
										"1:38.3759994506836 2:-69.57966613769531 3:61.5048828125",
										"1:38.43840026855468 2:-69.83381652832031 3:63.2138671875",
										"1:38.18880081176757 2:-68.69012451171875 3:59.5517578125",
										"1:38.12639999389648 2:-68.37242889404295 3:58.0869140625",
										"1:37.75199890136718 2:-66.65689086914062 3:57.33160400390625",
										"1:37.56480026245117 2:-65.89442443847656 3:58.46075439453125",
										"1:37.43999862670898 2:-65.19550323486328 3:58.21661376953125",
										"1:37.3775978088379 2:-64.94134521484375 3:59.277099609375",
										"1:37.31520080566406 2:-64.81427001953125 3:61.34466552734375",
										"1:36.75359725952148 2:-62.2727279663086 3:59.16265869140625",
										"1:36.56639862060546 2:-61.31964874267578 3:59.19317626953125",
										"1:36.44160079956054 2:-60.81134033203125 3:60.619873046875",
										"1:36.37919998168945 2:-60.49364471435546 3:61.86346435546875",
										"1:35.94239807128906 2:-58.46041107177734 3:61.047119140625",
										"1:35.81760025024414 2:-57.88856506347656 3:62.2525634765625",
										"1:35.81760025024414 2:-57.95210266113281 3:62.5577392578125",
										"1:35.63039779663085 2:-57.18963623046875 3:62.97735595703125",
										"1:35.50559997558593 2:-56.61779022216796 3:65.4874267578125",
										"1:35.50559997558593 2:-56.49071502685546 3:63.06890869140625",
										"1:35.50559997558593 2:-56.49071502685546 3:63.64111328125",
										"1:35.38079833984375 2:-55.98240661621093 3:63.34356689453125",
										"1:35.38079833984375 2:-55.98240661621093 3:63.671630859375",
										"1:35.31839752197265 2:-55.7282485961914 3:63.488525390625",
										"1:35.19359970092773 2:-55.15640258789062 3:61.58880615234375",
										"1:35.31839752197265 2:-55.7282485961914 3:58.44549560546875",
										"1:35.56800079345703 2:-56.80840301513671 3:60.741943359375",
										"1:35.94239807128906 2:-58.6510238647461 3:65.70867919921875",
										"1:36.12960052490234 2:-59.3499526977539 3:66.47161865234375",
										"1:36.44160079956054 2:-60.81134033203125 3:66.50213623046875",
										"1:36.50399780273437 2:-61.1290283203125 3:62.8323974609375",
										"1:36.44160079956054 2:-60.81134033203125 3:63.92340087890625",
										"1:36.50399780273437 2:-61.001953125 3:62.5882568359375",
										"1:36.12960052490234 2:-59.3499526977539 3:62.3746337890625",
										"1:36.44160079956054 2:-60.74779510498046 3:64.13702392578125",
										"1:36.62879943847656 2:-61.57379913330078 3:62.04656982421875",
										"1:36.75359725952148 2:-62.2727279663086 3:60.558837890625",
										"1:36.75359725952148 2:-62.20919036865234 3:60.89453125",
										"1:36.56639862060546 2:-61.31964874267578 3:58.55230712890625",
										"1:36.56639862060546 2:-61.31964874267578 3:58.88800048828125",
										"1:36.50399780273437 2:-61.001953125 3:61.74139404296875",
										"1:36.31679916381835 2:-60.11241149902343 3:60.26129150390625",
										"1:36.25439834594726 2:-59.92179870605468 3:60.650390625",
										"1:36.19199752807617 2:-59.7311782836914 3:60.83349609375",
										"1:36.19199752807617 2:-59.7311782836914 3:59.92559814453125",
										"1:36.31679916381835 2:-60.23948669433593 3:58.7430419921875",
										"1:36.12960052490234 2:-59.41349029541015 3:59.07110595703125",
										"1:36.06719970703125 2:-59.03225708007812 3:57.52996826171875",
										"1:36.06719970703125 2:-59.03225708007812 3:57.22479248046875",
										"1:36.00479888916015 2:-58.90518188476562 3:55.59210205078125",
										"1:36.00479888916015 2:-58.90518188476562 3:57.7664794921875",
										"1:36.06719970703125 2:-59.15933227539062 3:60.58935546875",
										"1:36.06719970703125 2:-59.03225708007812 3:64.50323486328125",
										"1:36.06719970703125 2:-59.22286987304687 3:65.075439453125",
										"1:36.06719970703125 2:-59.15933227539062 3:64.13702392578125",
										"1:36.00479888916015 2:-58.6510238647461 3:57.34686279296875",
										"1:35.75519943237304 2:-57.57086944580078 3:56.56103515625",
										"1:35.81760025024414 2:-58.07917785644531 3:54.7757568359375",
										"1:35.75519943237304 2:-57.76148223876953 3:60.58935546875",
										"1:35.63039779663085 2:-57.06256103515625 3:60.558837890625",
										"1:35.44319915771484 2:-56.30009460449218 3:60.375732421875",
										"1:35.38079833984375 2:-55.98240661621093 3:60.83349609375",
										"1:35.13119888305664 2:-54.83870697021484 3:62.0389404296875",
										"1:35.63039779663085 2:-57.18963623046875 3:62.7103271484375",
										"1:35.69279861450195 2:-57.44379425048828 3:65.58660888671875",
										"1:35.75519943237304 2:-57.76148223876953 3:65.37298583984375",
										"1:35.81760025024414 2:-57.95210266113281 3:67.79150390625",
										"1:35.75519943237304 2:-57.76148223876953 3:65.8231201171875",
										"1:35.81760025024414 2:-58.07917785644531 3:62.8323974609375",
										"1:36.12960052490234 2:-59.3499526977539 3:63.61822509765625",
										"1:36.06719970703125 2:-59.15933227539062 3:60.986083984375",
										"1:36.06719970703125 2:-59.15933227539062 3:63.58770751953125",
										"1:35.50559997558593 2:-56.61779022216796 3:54.72235107421875",
										"1:35.31839752197265 2:-55.7282485961914 3:54.81390380859375",
										"1:35.25600051879882 2:-55.41055297851562 3:54.41717529296875",
										"1:35.06879806518554 2:-54.58455657958984 3:54.4248046875",
										"1:34.75679779052734 2:-53.1231689453125 3:53.94415283203125",
										"1:34.63199996948242 2:-52.55131530761718 3:54.09674072265625",
										"1:34.50719833374023 2:-51.9794692993164 3:54.97412109375",
										"1:34.56959915161132 2:-52.29716491699218 3:55.45477294921875",
										"1:34.44479751586914 2:-51.66177368164062 3:55.88201904296875",
										"1:34.50719833374023 2:-52.04300689697265 3:57.57574462890625",
										"1:34.31999969482421 2:-51.08992767333984 3:56.8509521484375",
										"1:34.38240051269531 2:-51.40762329101562 3:58.41497802734375",
										"1:34.38240051269531 2:-51.40762329101562 3:59.1702880859375",
										"1:34.44479751586914 2:-51.66177368164062 3:61.6422119140625",
										"1:34.44479751586914 2:-51.66177368164062 3:61.8863525390625",
										"1:34.44479751586914 2:-51.66177368164062 3:65.20513916015625",
										"1:34.38240051269531 2:-51.40762329101562 3:64.74737548828125",
										"1:34.44479751586914 2:-51.66177368164062 3:64.68634033203125",
										"1:34.44479751586914 2:-51.66177368164062 3:62.84765625",
										"1:34.25759887695312 2:-50.83577728271484 3:62.634033203125",
										"1:34.00799942016601 2:-49.6285400390625 3:64.98388671875",
										"1:33.94559860229492 2:-49.31085205078125 3:65.7926025390625",
										"1:33.88319778442382 2:-49.12023162841796 3:65.28143310546875",
										"1:33.69599914550781 2:-48.16715240478515 3:63.20623779296875",
										"1:33.7583999633789 2:-48.48484802246093 3:67.00567626953125",
										"1:33.94559860229492 2:-49.43792724609375 3:70.4923095703125",
										"1:33.82080078125 2:-48.73899841308593 3:66.76153564453125",
										"1:33.82080078125 2:-48.73899841308593 3:64.953369140625",
										"1:33.82080078125 2:-48.80254364013671 3:62.24493408203125",
										"1:34.00799942016601 2:-49.69207763671875 3:65.2890625",
										"1:33.94559860229492 2:-49.43792724609375 3:65.92230224609375",
										"1:34.00799942016601 2:-49.6285400390625 3:65.98333740234375",
										"1:33.94559860229492 2:-49.31085205078125 3:65.441650390625",
										"1:33.94559860229492 2:-49.43792724609375 3:65.197509765625",
										"1:33.57119750976562 2:-47.59530639648437 3:65.9757080078125",
										"1:33.57119750976562 2:-47.72238159179687 3:65.7010498046875",
										"1:33.57119750976562 2:-47.59530639648437 3:67.32611083984375",
										"1:33.5088005065918 2:-47.2776107788086 3:66.99041748046875",
										"1:33.5088005065918 2:-47.2776107788086 3:66.42584228515625",
										"1:33.5088005065918 2:-47.2776107788086 3:66.6318359375",
										"1:33.63359832763671 2:-48.04007720947265 3:65.7926025390625",
										"1:33.63359832763671 2:-47.91300201416015 3:64.73974609375",
										"1:33.88319778442382 2:-49.05669403076171 3:66.36480712890625",
										"1:34.19519805908203 2:-50.51808166503906 3:65.35009765625",
										"1:34.38240051269531 2:-51.40762329101562 3:66.44110107421875",
										"1:34.38240051269531 2:-51.40762329101562 3:66.04437255859375",
										"1:34.44479751586914 2:-51.66177368164062 3:66.22747802734375",
										"1:34.63199996948242 2:-52.48777770996093 3:64.3582763671875",
										"1:34.75679779052734 2:-53.05962371826171 3:65.57135009765625",
										"1:34.94400024414062 2:-53.94916534423828 3:65.72393798828125",
										"1:35.00639724731445 2:-54.26686096191406 3:65.14410400390625",
										"1:35.06879806518554 2:-54.52101135253906 3:63.64111328125",
										"1:35.19359970092773 2:-55.15640258789062 3:63.854736328125",
										"1:35.44319915771484 2:-56.23655700683593 3:63.43511962890625",
										"1:35.50559997558593 2:-56.61779022216796 3:63.37408447265625",
										"1:35.75519943237304 2:-57.76148223876953 3:62.3441162109375",
										"1:35.81760025024414 2:-58.07917785644531 3:61.92449951171875",
										"1:35.94239807128906 2:-58.46041107177734 3:63.31304931640625",
										"1:36.12960052490234 2:-59.3499526977539 3:60.375732421875",
										"1:36.44160079956054 2:-60.74779510498046 3:60.650390625",
										"1:36.56639862060546 2:-61.38318634033203 3:58.73541259765625",
										"1:36.87839889526367 2:-62.59041595458984 3:58.36920166015625",
										"1:37.06559753417968 2:-63.54349517822265 3:58.27764892578125",
										"1:37.06559753417968 2:-63.67057800292968 3:57.94195556640625",
										"1:37.31520080566406 2:-64.6236572265625 3:57.36212158203125",
										"1:37.31520080566406 2:-64.68719482421875 3:55.4471435546875",
										"1:37.56480026245117 2:-65.89442443847656 3:53.4329833984375",
										"1:37.6895980834961 2:-66.33919525146484 3:57.20953369140625",
										"1:37.6895980834961 2:-66.33919525146484 3:58.63623046875",
										"1:37.81439971923828 2:-67.03812408447266 3:59.49072265625",
										"1:37.75199890136718 2:-66.65689086914062 3:58.75830078125",
										"1:37.87680053710937 2:-67.3558120727539 3:56.50762939453125",
										"1:38.0639991760254 2:-67.92765808105467 3:58.5751953125",
										"1:38.0639991760254 2:-68.11827850341795 3:59.0634765625",
										"1:38.0639991760254 2:-68.11827850341795 3:59.185546875",
										"1:38.43840026855468 2:-69.77027893066406 3:60.83349609375",
										"1:38.43840026855468 2:-69.83381652832031 3:59.00244140625",
										"1:38.43840026855468 2:-69.83381652832031 3:56.774658203125",
										"1:38.3759994506836 2:-69.45259094238281 3:56.774658203125",
										"1:38.3759994506836 2:-69.57966613769531 3:56.5",
										"1:38.3759994506836 2:-69.45259094238281 3:54.49346923828125",
										"1:38.3135986328125 2:-69.26197052001953 3:54.46295166015625",
										"1:38.6879997253418 2:-70.78689575195312 3:56.33978271484375",
										"1:38.7504005432129 2:-71.1045913696289 3:56.40081787109375",
										"1:38.81279754638671 2:-71.48582458496092 3:54.99700927734375",
										"1:38.81279754638671 2:-71.42228698730467 3:54.69183349609375",
										"1:39.0 2:-72.248291015625 3:55.94305419921875",
										"1:39.0624008178711 2:-72.56597900390625 3:56.3626708984375",
										"1:39.37439727783203 2:-74.09090423583984 3:56.5457763671875",
										"1:39.37439727783203 2:-73.9002914428711 3:55.8743896484375",
										"1:39.37439727783203 2:-74.0273666381836 3:55.5692138671875",
										"1:39.2495994567871 2:-73.51905822753906 3:56.55340576171875",
										"1:39.3120002746582 2:-73.58259582519531 3:56.8509521484375",
										"1:39.3120002746582 2:-73.58259582519531 3:57.04168701171875",
										"1:39.49919891357421 2:-74.47213745117188 3:61.64984130859375",
										"1:39.56159973144531 2:-74.8533706665039 3:61.00897216796875",
										"1:39.56159973144531 2:-74.8533706665039 3:59.72723388671875",
										"1:39.43679809570312 2:-74.28152465820312 3:55.25640869140625",
										"1:39.49919891357421 2:-74.47213745117188 3:55.47003173828125",
										"1:39.43679809570312 2:-74.28152465820312 3:54.8367919921875",
										"1:39.3120002746582 2:-73.70967864990234 3:54.4095458984375",
										"1:39.0624008178711 2:-72.56597900390625 3:54.56976318359375",
										"1:39.3120002746582 2:-73.58259582519531 3:54.6231689453125",
										"1:39.3120002746582 2:-73.58259582519531 3:54.4400634765625",
										"1:39.37439727783203 2:-74.0273666381836 3:54.40191650390625",
										"1:39.6240005493164 2:-75.04398345947266 3:58.2547607421875",
										"1:39.68639755249023 2:-75.23460388183592 3:57.4918212890625",
										"1:39.68639755249023 2:-75.23460388183592 3:52.46405029296875",
										"1:39.87360000610351 2:-76.1241455078125 3:52.87603759765625",
										"1:39.81119918823242 2:-75.8064498901367 3:52.6090087890625",
										"1:39.87360000610351 2:-76.18768310546875 3:56.20245361328125",
										"1:39.93599700927734 2:-76.3782958984375 3:54.882568359375",
										"1:39.93599700927734 2:-76.3782958984375 3:53.6923828125",
										"1:39.2495994567871 2:-73.45552062988281 3:52.1207275390625",
										"1:39.12479782104492 2:-72.82013702392578 3:51.88421630859375",
										"1:38.87519836425781 2:-71.8035202026367 3:52.10546875",
										"1:38.81279754638671 2:-71.42228698730467 3:52.69293212890625",
										"1:38.6879997253418 2:-70.78689575195312 3:54.72998046875",
										"1:38.0639991760254 2:-67.99120330810545 3:54.34088134765625",
										"1:38.0015983581543 2:-67.92765808105467 3:55.98883056640625",
										"1:37.75199890136718 2:-66.72042846679688 3:55.5386962890625",
										"1:37.6895980834961 2:-66.33919525146484 3:56.3626708984375",
										"1:37.6895980834961 2:-66.33919525146484 3:56.93487548828125",
										"1:37.627197265625 2:-66.08504486083984 3:56.3321533203125",
										"1:37.19039916992187 2:-64.24242401123045 3:56.8814697265625",
										"1:36.75359725952148 2:-62.20919036865234 3:56.21771240234375",
										"1:36.37919998168945 2:-60.43010711669921 3:56.92724609375",
										"1:36.00479888916015 2:-58.7780990600586 3:58.01824951171875",
										"1:35.94239807128906 2:-58.5239486694336 3:58.14031982421875",
										"1:35.81760025024414 2:-58.07917785644531 3:58.6820068359375",
										"1:35.81760025024414 2:-58.07917785644531 3:59.1702880859375",
										"1:35.81760025024414 2:-58.07917785644531 3:59.43731689453125",
										"1:35.81760025024414 2:-57.95210266113281 3:59.1092529296875",
										"1:35.50559997558593 2:-56.49071502685546 3:57.92669677734375",
										"1:35.63039779663085 2:-57.06256103515625 3:57.68255615234375",
										"1:35.56800079345703 2:-56.87194061279296 3:60.16973876953125",
										"1:35.44319915771484 2:-56.30009460449218 3:61.8863525390625",
										"1:35.25600051879882 2:-55.34701538085937 3:60.864013671875",
										"1:35.19359970092773 2:-55.02932739257812 3:60.986083984375",
										"1:35.19359970092773 2:-55.15640258789062 3:59.62042236328125",
										"1:35.13119888305664 2:-54.83870697021484 3:60.619873046875",
										"1:35.00639724731445 2:-54.26686096191406 3:61.6116943359375",
										"1:35.00639724731445 2:-54.26686096191406 3:61.6727294921875",
										"1:34.94400024414062 2:-53.94916534423828 3:61.8863525390625",
										"1:35.00639724731445 2:-54.26686096191406 3:62.30596923828125",
										"1:34.88159942626953 2:-53.56793212890625 3:59.83404541015625",
										"1:34.81919860839843 2:-53.3773193359375 3:59.77301025390625",
										"1:34.75679779052734 2:-53.05962371826171 3:59.71197509765625",
										"1:34.50719833374023 2:-51.9794692993164 3:61.13104248046875",
										"1:34.31999969482421 2:-51.08992767333984 3:62.27545166015625",
										"1:34.31999969482421 2:-51.08992767333984 3:62.55010986328125",
										"1:34.25759887695312 2:-50.83577728271484 3:62.39752197265625",
										"1:34.25759887695312 2:-50.83577728271484 3:62.51959228515625",
										"1:34.19519805908203 2:-50.51808166503906 3:63.90814208984375",
										"1:34.19519805908203 2:-50.51808166503906 3:64.3582763671875",
										"1:34.19519805908203 2:-50.51808166503906 3:67.1048583984375",
										"1:34.13279724121093 2:-50.20038604736328 3:64.56427001953125",
										"1:34.13279724121093 2:-50.20038604736328 3:60.20025634765625",
										"1:34.13279724121093 2:-50.20038604736328 3:67.66943359375"    
												};
}

public class SvmPredictRBF {

	private NativeI2C i2c;
	private ADT7410 temperatureSensor;
	private MPL115A2 pressureSensor;
	private SHT21 humiditySensor;

	private void init() throws Exception {
		System.out.println("I2C(Init)");
		i2c = NativeI2C.getInstance(1);
		i2c.open(I2C.DATA_RATE_400);

		System.out.println("ADT7410(Init)");
		temperatureSensor = new ADT7410(i2c, ADT7410.ADDR_0, null, null);
		temperatureSensor.open();
		temperatureSensor.setMode(ADT7410.CONFIG_MODE_CONTINUOUS);

		System.out.println("GPIO(Init)");
		GPIO resetPin = NativeGPIO.getInstance(24);
		GPIO shutDownPin = NativeGPIO.getInstance(12);

		System.out.println("MPL115A2(Init)");
		pressureSensor = new MPL115A2(i2c, resetPin, shutDownPin);
		pressureSensor.open();
		pressureSensor.setReset(false);
		pressureSensor.setShutdown(false);

		System.out.println("SHT21(Init)");
		humiditySensor = new SHT21(i2c);
		humiditySensor.open();
		humiditySensor.setResolution(SHT21.RESOLUTION_RH12_T14);
		humiditySensor.reset();

		System.out.println("Done(Init)");
	}

	public void run() throws Exception {
		init();
		int tempRaw;
		int pressurePr;
		int rawRH;
		float celsius = 0;
		float pressure = 0;
		float rh = 0;
		double label = 0.0;
		String value="";
		System.out.println("Label | Temperature | Pressure | Humidity");
		while (true) {
			try {
				// get temp raw
				tempRaw = temperatureSensor.getTemperatureRaw();
				// get real temp in celcius
				celsius = temperatureSensor.getTemperatureCelsius();
				Thread.sleep(1000);

				// start pressure conversion
				pressureSensor.startBothConversion();
				//thread sleep berdasarkan conversion time
				Thread.sleep(MPL115A2.BOTH_CONVERSION_TIME);
				// get raw pressure
				pressurePr = pressureSensor.getPressureRaw();
				// get real pressure
				pressure = pressureSensor.compensate(pressurePr, tempRaw);
				//thread sleep berdasarkan waktu yang ditetapkan (1 Detik) dikurangi conversion time
				Thread.sleep(1000 - MPL115A2.BOTH_CONVERSION_TIME);

				// start humidity relative converstion
				humiditySensor.startRelativeHumidityConversion();
				Thread.sleep(100);
				// get raw RH
				rawRH = humiditySensor.getRelativeHumidityRaw();
				// get converted rh (humidity)
				rh = SHT21.convertRawRHToRHw(rawRH);
				Thread.sleep(1000);
				

				// load model header
				svm_model model = svm.svm_load_model();
				
				//ubah label manual disini karena sensor tidak mendukung library pengambilan waktu
				//label 1 Siang, label 0 Malam
				label=1.0;

				// temp in celsius
				System.out.println("Generate data berdasarkan sensing sensor: ");
				System.out.println(label + " " + "1:" + celsius + " " + "2:" + pressure + " " + "3:" + rh);
				//set data sekarang berdasarkan apa yang sensor generate
				System.out.println("Hasil dari prediksi LIBSVM: ");
				value=label + " " + "1:" + celsius + " " + "2:" + pressure + " " + "3:" + rh;
				
				// method predict dengan parameter value dari test data dan model header
				predict(value, model);
			} catch (Exception e) {
				System.out.println("SHT21 error");
			}
		}
	}
	


	public static void main(String[] args) throws Exception {
		new SvmPredictRBF().run();
	}

	/*
	 * Method predict dengan parameter value dari test data dan model header
	 */
	private static void predict(String input, svm_model model) {
		// mengambil value dari svm_type yang berada pada header model
		int svm_type = svm.svm_get_svm_type(model);
		// mengambil jumlah class dari svm_type yang berada pada header model
		int nr_class = svm.svm_get_nr_class(model);

		// inisialisasi label
		int[] labels = new int[nr_class];
		// mengambil label pada model
		svm.svm_get_labels(model, labels);

		// kode untuk mengambil label,index, dan value dari sebuah test_data
		String[] lines = StringUtils.split(input, "\n");
		for (int i = 0; i < lines.length; i++) {
			String line = input;
			if (line == null) {
				break;
			}
			String label = StringUtils.split(line, " ")[0];
			line = line.replace(label + " ", "").trim();
			double target = Double.parseDouble(label);
			String[] lineSplit = StringUtils.split(line, " ");
			svm_node[] x = new svm_node[lineSplit.length];
			for (int j = 0; j < lineSplit.length; j++) {
				String[] dataSplit = StringUtils.split(lineSplit[j], ":");// pemisahan berdasarkan string yang
																			// mengandung ":"
				x[j] = new svm_node();// inisialisasi node baru
				x[j].index = Integer.parseInt(dataSplit[0]);// untuk menampung index atribut
				x[j].value = Double.parseDouble(dataSplit[1]);// untuk menampung value atribut
			}

			double v;
			v = svm.svm_predict(model, x);// prediksi model dan masukan yang sudah di split isinya dari
			System.out.println(v);
		}
	}
}

class svm_parameter implements Cloneable {

	/* svm_type */
	public static final int C_SVC = 0;

	/* kernel_type */
	public static final int RBF = 2;

	public int svm_type;
	public int kernel_type;
	public double gamma;	// for poly/rbf/sigmoid

	public Object clone() {
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			return null;
		}
	}
}

//
// Kernel Cache
//
// l is the number of total data items
// size is the cache size limit in bytes
//
class Cache {

	private final int l;
	private long size;

	private final class head_t {

		head_t prev, next; // a cicular list
		float[] data;
		int len; // data[0,len) is cached in this entry
	}

	private final head_t[] head;
	private head_t lru_head;

	Cache(int l_, long size_) {
		l = l_;
		size = size_;
		head = new head_t[l];
		for (int i = 0; i < l; i++) {
			head[i] = new head_t();
		}
		size /= 4;
		size -= l * (16 / 4); // sizeof(head_t) == 16
		size = Math.max(size, 2 * (long) l); // cache must be large enough for two columns
		lru_head = new head_t();
		lru_head.next = lru_head.prev = lru_head;
	}

	private void lru_delete(head_t h) {
		// delete from current location
		h.prev.next = h.next;
		h.next.prev = h.prev;
	}

	private void lru_insert(head_t h) {
		// insert to last position
		h.next = lru_head;
		h.prev = lru_head.prev;
		h.prev.next = h;
		h.next.prev = h;
	}

	void swap_index(int i, int j) {
		if (i == j) {
			return;
		}

		if (head[i].len > 0) {
			lru_delete(head[i]);
		}
		if (head[j].len > 0) {
			lru_delete(head[j]);
		}
		do {
			float[] tmp = head[i].data;
			head[i].data = head[j].data;
			head[j].data = tmp;
		} while (false);
		do {
			int tmp = head[i].len;
			head[i].len = head[j].len;
			head[j].len = tmp;
		} while (false);
		if (head[i].len > 0) {
			lru_insert(head[i]);
		}
		if (head[j].len > 0) {
			lru_insert(head[j]);
		}

		if (i > j) {
			do {
				int tmp = i;
				i = j;
				j = tmp;
			} while (false);
		}
		for (head_t h = lru_head.next; h != lru_head; h = h.next) {
			if (h.len > i) {
				if (h.len > j) {
					do {
						float tmp = h.data[i];
						h.data[i] = h.data[j];
						h.data[j] = tmp;
					} while (false);
				} else {
					// give up
					lru_delete(h);
					size += h.len;
					h.data = null;
					h.len = 0;
				}
			}
		}
	}
}

class Kernel {

	private svm_node[][] x;
	private final int kernel_type;
	  private final double gamma;
	  
	    Kernel(int l, svm_node[][] x_, svm_parameter param) {
        this.kernel_type = param.kernel_type;
        this.gamma = param.gamma;

        x = (svm_node[][]) x_.clone();
        }
	    
	    private static double powi(double base, int times) {
	        double tmp = base, ret = 1.0;
	
	        for (int t = times; t > 0; t /= 2) {
	            if (t % 2 == 1) {
	                ret *= tmp;
	            }
	            tmp = tmp * tmp;
	        }
	        return ret;
	    }
    

	static double dot(svm_node[] x, svm_node[] y) {
		double sum = 0;
		int xlen = x.length;
		int ylen = y.length;
		int i = 0;
		int j = 0;
		while (i < xlen && j < ylen) {
			if (x[i].index == y[j].index) {
				sum += x[i++].value * y[j++].value;
			} else {
				if (x[i].index > y[j].index) {
					++j;
				} else {
					++i;
				}
			}
		}
		return sum;
	}

	static double k_function(svm_node[] x, svm_node[] y, svm_parameter param) {
		switch (param.kernel_type) {
		case svm_parameter.RBF:
		{
			double sum = 0;
			int xlen = x.length;
			int ylen = y.length;
			int i = 0;
			int j = 0;
			while(i < xlen && j < ylen)
			{
				if(x[i].index == y[j].index)
				{
					double d = x[i++].value - y[j++].value;
					sum += d*d;
				}
				else if(x[i].index > y[j].index)
				{
					sum += y[j].value * y[j].value;
					++j;
				}
				else
				{
					sum += x[i].value * x[i].value;
					++i;
				}
			}

			while(i < xlen)
			{
				sum += x[i].value * x[i].value;
				++i;
			}

			while(j < ylen)
			{
				sum += y[j].value * y[j].value;
				++j;
			}

			return Math.exp(-param.gamma*sum);
		}
		default:
			return 0; // java
		}
	}
}

class svm {

	//
	// construct and solve various formulations
	//
	public static final int LIBSVM_VERSION = 323;

	// method untuk mengembalikan type svm dari model data
	public static int svm_get_svm_type(svm_model model) {
		return model.param.svm_type;
	}

	// method untuk mengembalikan jumlah class dari model data
	public static int svm_get_nr_class(svm_model model) {
		return model.nr_class;
	}

	// method untuk mengembalikan label dari model data
	public static void svm_get_labels(svm_model model, int[] label) {
		if (model.label != null) {
			for (int i = 0; i < model.nr_class; i++) {
				label[i] = model.label[i];
			}
		}
	}

	public static double svm_predict_values(svm_model model, svm_node[] x, double[] dec_values) {
		int i;
		
			int nr_class = model.nr_class;
			int l = model.l;

			double[] kvalue = new double[l];
			for (i = 0; i < l; i++) {
				kvalue[i] = Kernel.k_function(x, model.SV[i], model.param);
			}

			int[] start = new int[nr_class];
			start[0] = 0;
			for (i = 1; i < nr_class; i++) {
				start[i] = start[i - 1] + model.nSV[i - 1];
			}

			int[] vote = new int[nr_class];
			for (i = 0; i < nr_class; i++) {
				vote[i] = 0;
			}

			int p = 0;
			for (i = 0; i < nr_class; i++) {
				for (int j = i + 1; j < nr_class; j++) {
					double sum = 0;
					int si = start[i];
					int sj = start[j];
					int ci = model.nSV[i];
					int cj = model.nSV[j];

					int k;
					double[] coef1 = model.sv_coef[j - 1];
					double[] coef2 = model.sv_coef[i];
					for (k = 0; k < ci; k++) {
						sum += coef1[si + k] * kvalue[si + k];
					}
					for (k = 0; k < cj; k++) {
						sum += coef2[sj + k] * kvalue[sj + k];
					}
					sum -= model.rho[p];
					dec_values[p] = sum;

					if (dec_values[p] > 0) {
						++vote[i];
					} else {
						++vote[j];
					}
					p++;
				}
			}

			int vote_max_idx = 0;
			for (i = 1; i < nr_class; i++) {
				if (vote[i] > vote[vote_max_idx]) {
					vote_max_idx = i;
				}
			}

			return model.label[vote_max_idx];
		
	}

	public static double svm_predict(svm_model model, svm_node[] x) {
		int nr_class = model.nr_class;
		double[] dec_values;
		dec_values = new double[nr_class * (nr_class - 1) / 2];
		double pred_result = svm_predict_values(model, x, dec_values);
		return pred_result;
	}

	static final String svm_type_table[] = { "c_svc" };

	static final String kernel_type_table[] = { "rbf" };

	// method untuk membaca header pada kelas model_data
	private static boolean read_model_header(svm_model model) {
		svm_parameter param = new svm_parameter();
		model.param = param;

		try {
			for (int x = 0; x < model_data.header.length; x++) {
				String cmd = model_data.header[x];
				String arg = cmd.substring(cmd.indexOf(' ') + 1);
				if (cmd.startsWith("svm_type")) {
					int i;
					for (i = 0; i < svm_type_table.length; i++) {
						if (arg.indexOf(svm_type_table[i]) != -1) {
							param.svm_type = i;
							break;
						}
					}
					if (i == svm_type_table.length) {
						System.err.print("unknown svm type.\n");
						return false;
					}
				} else if (cmd.startsWith("kernel_type")) {
					int i;
					for (i = 0; i < kernel_type_table.length; i++) {
						if (arg.indexOf(kernel_type_table[i]) != -1) {
							param.kernel_type = i;
							break;
						}
					}
					if (i == kernel_type_table.length) {
						System.err.print("unknown kernel function.\n");
						return false;
					}
				}  else if (cmd.startsWith("gamma")) {
                    param.gamma = Double.parseDouble(arg);
                } else if (cmd.startsWith("nr_class")) {
					model.nr_class = Integer.parseInt(arg);
				} else if (cmd.startsWith("total_sv")) {
					model.l = Integer.parseInt(arg);
				} else if (cmd.startsWith("rho")) {
					int n = model.nr_class * (model.nr_class - 1) / 2;
					model.rho = new double[n];
					String value = StringUtils.split(cmd, " ")[1];
					for (int i = 0; i < n; i++) {
						model.rho[i] = Double.parseDouble(value);
					}
				} else if (cmd.startsWith("label")) {
					int n = model.nr_class;
					model.label = new int[n];
					String[] value = StringUtils.split(cmd, " ");
					for (int i = 0; i < n; i++) {
						model.label[i] = Integer.parseInt(value[i + 1]);
					}
				} else if (cmd.startsWith("nr_sv")) {
					int n = model.nr_class;
					model.nSV = new int[n];
					String[] value = StringUtils.split(cmd, " ");
					for (int i = 0; i < n; i++) {
						model.nSV[i] = Integer.parseInt(value[i + 1]);
					}
				} else if (cmd.startsWith("SV")) {
					break;
				}
			}

		} catch (Exception e) {
			return false;
		}
		return true;

	}

	// method untuk membaca label/coefisien dan value dari model_data
	public static svm_model svm_load_model() {

		// read parameters
		svm_model model = new svm_model();

		model_data md = new model_data();
		model.label = null;
		model.nSV = null;

		if (read_model_header(model) == false) {
			System.err.print("ERROR: failed to read model\n");
			return null;
		}

		// read sv_coef and SV
		int l = model.l + 1;
		model.SV = new svm_node[l][];
		// mengambil isi coefisien atau label dari satu baris model value
		model.sv_coef = model_data.sv_coef;
		int position = 0;
		for (int i = 0; i < model_data.sv_string.length; i++) {
			// split setiap index dan value dari model value
			String[] idx_values = StringUtils.split(model_data.sv_string[i], " ");
			int n = idx_values.length;
			model.SV[position] = new svm_node[n];
			for (int j = 0; j < idx_values.length; j++) {
				// split index dan value dalam 1 baris model value
				String[] idx_value = StringUtils.split(idx_values[j], ":");
				model.SV[position][j] = new svm_node();
				model.SV[position][j].index = Integer.parseInt(idx_value[0]);
				model.SV[position][j].value = Double.parseDouble(idx_value[1]);
			}
			position++;
		}
		return model;
	}
}

class svm_model {

	public svm_parameter param; // parameter
	public int nr_class; // number of classes, = 2 in regression/one class svm
	public int l; // total #SV
	public svm_node[][] SV; // SVs (SV[l])
	public double[][] sv_coef; // coefficients for SVs in decision functions (sv_coef[k-1][l])
	public double[] rho; // constants in decision functions (rho[k*(k-1)/2])

	// for classification only
	public int[] label; // label of each class (label[k])
	public int[] nSV; // number of SVs for each class (nSV[k])
	// nSV[0] + nSV[1] + ... + nSV[k-1] = l
};

class svm_node {
	public int index;
	public double value;
}